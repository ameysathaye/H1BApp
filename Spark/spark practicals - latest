Spark Practicals
----------------

1. To Login
-----------
$ spark-shell


2. Convert text to lower case
------------------------------
val inputfile = sc.textFile("sample.txt");

val inputfile = sc.textFile("hdfs://localhost:54310/hanoi/file.txt");

val lower = inputfile.map(a => a.toLowerCase());

lower.foreach(println);

inputfile.foreach(println);

3. Convert text to upper case
------------------------------
val inputfile = sc.textFile("/home/hduser/sample.txt");
val upper = inputfile.map(_.toUpperCase());
upper.foreach(println(_));

4. Calc the length of a file
-----------------------------
val lines = sc.textFile("/home/hduser/sample.txt");

val linelength = inputfile.map(s => s.length);

OR

val linelength = lines.map(_.length);

linelength.foreach(println);

val totallength = linelength.reduce((a,b) => a+b);


println("Total Length for all characters : " + totallength);



5. Word Count using spark
-------------------------
val inputfile = sc.textFile("hdfs://localhost:54310/hanoi/file.txt");
inputfile.foreach(println);

val transform = inputfile.flatMap(line => line.split(" "));

OR

val transform = inputfile.flatMap(_.split(" "));

transform.foreach(println);

val keybyword = transform.map(word => (word, 1));

keybyword.foreach(println);

val counts = keybyword.reduceByKey(_+_).sortByKey();

OR

val counts = keybyword.reduceByKey((a,b) => a+b).sortByKey();

val sortByVal = counts.collect.sortBy(_._2);

OR

val sortByVal = counts.collect.sortBy(-_._2);


sortByVal.foreach(println);

counts.foreach(println);

counts.saveAsTextFile("hdfs://localhost:54310/hanoi/spark1");
 

6. Returns the count of records
-------------------------------
val custRDD = sc.textFile("/home/hduser/custs.txt");
custRDD.count();

val txnRDD = sc.textFile("/home/hduser/txns1.txt");
txnRDD.count();


7.Mapping customer table to Profession and record
------------------------------------------------
val custRDD = sc.textFile("/home/hduser/custs.txt")
val professionRDD = custRDD.map(x => (x.split(",")(4), 1))
val professioncounts = professionRDD.reduceByKey(_+_).sortByKey();
professioncounts.foreach(println);


8.calculating total amount spent by each customer
-------------------------------------------------
val txnRDD = sc.textFile("/home/hduser/txns1.txt")
val custRDD = txnRDD.map(x => (x.split(",")(2), x.split(",")(3).toDouble ))
custRDD.foreach(println);
val custTotalSpent = custRDD.reduceByKey((a,b) => a+b).sortByKey();
custTotalSpent.foreach(println);

OR
---
val custRDD = txnRDD.map(x => (x.split(",")(2), x.split(",")(3).toDouble )).reduceByKey((a,b) => a+b).sortByKey()
custRDD.foreach(println);


9.Find out the customer I.D for the customer who has spent the maximum amount in a single transaction. 
------------------------------------------------------------------------------------------------------------------------------------------------
scala> val retailRDD = sc.textFile("/home/hduser/Retail_Data")

scala> retailRDD.count()

scala> val retail = retailRDD.map(line => line.split(";").map(_.trim))

scala> val reqDet = retail.map(x=>x(8).toInt)

scala> reqDet.foreach(println);

scala> val maxAmount = reqDet.max

scala> val cusDet = retail.filter(x=>x(8).toInt == maxAmount)

scala> cusDet.collect

scala> cusDet.map(x=>x(1)).collect




